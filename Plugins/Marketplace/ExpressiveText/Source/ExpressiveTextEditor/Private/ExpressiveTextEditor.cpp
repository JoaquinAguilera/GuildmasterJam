// Copyright 2022 Guganana. All Rights Reserved.
#include "ExpressiveTextEditor.h"

#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextAction_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextAsset_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextStyle_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextAnimation_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextFont_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/AssetCustomizations/ExpressiveTextMaterial_AssetTypeActions.h"
#include "ExpressiveTextEditor/Public/ExpressiveTextAnimationNameCustomization.h"
#include "ExpressiveTextEditor/Public/ExpressiveTextFieldsCustomization.h"

#include <Kismet2/KismetEditorUtilities.h>

void FExpressiveTextEditorModule::RegisterAssetTools()
{
	IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>("AssetTools").Get();

	ExpressiveTextCategory = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT("ExpressiveText")), FText::FromString("Expressive Text"));

	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextAction_AssetTypeActions()));
	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextAsset_AssetTypeActions()) );
	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextStyle_AssetTypeActions()));
	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextAnimation_AssetTypeActions()));
	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextMaterial_AssetTypeActions()));
	RegisterAssetTypeAction(AssetTools, MakeShareable(new FExpressiveTextFont_AssetTypeActions()));
	
	//RegisterCustomPropertyTypeLayout("ExText_GlyphAnimation", FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FExText_GlyphAnimationCustomization::MakeInstance));
	RegisterCustomPropertyTypeLayout("ExpressiveTextFields", FOnGetPropertyTypeCustomizationInstance::CreateStatic(&FExText_ExpressiveTextFieldsCustomization::MakeInstance));

	FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, UExText_ActionBase::StaticClass(), GET_FUNCTION_NAME_CHECKED(UExText_ActionBase, Run));
}		

uint32 FExpressiveTextEditorModule::ExpressiveTextCategory = 0;

IMPLEMENT_MODULE(FExpressiveTextEditorModule, ExpressiveTextEditor);
